pipeline {
    agent any
    tools {
        maven 'Maven3' // Ensure this is configured in Jenkins
    }
    environment {
        AWS_CREDENTIALS = credentials('aws-creds')
        SNS_TOPIC_ARN = 'arn:aws:sns:us-east-2:173646783052:Jenkins-CICD-SNS'
        AWS_REGION = 'us-east-2'
        DOCKER_IMAGE = "sohaliya/java-exmaple:latest" // Replace with your Docker Hub username and image name also you can tag with build number replace with ${env.BUILD_NUMBER}
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/sohaliya26/Jenkins-Automating-Code-Deployment.git'
            }
        }

        stage('Run Test Case') {
            steps {
                script {
                    try {
                        sh 'mvn test -Dsurefire.printSummary=true' // Run tests with detailed summary
                    } catch (Exception e) {
                        // Capture detailed test results and send notification
                        def buildNumber = env.BUILD_NUMBER
                        def jobName = env.JOB_NAME
                        def testReport = readFile('target/surefire-reports/TEST-com.java.example.CalculatorTest.xml') // Path to test report
                        def message = "Build #${buildNumber} for ${jobName} failed: Test cases failed. Test Report: ${testReport}"
                        sh "aws sns publish --topic-arn ${env.SNS_TOPIC_ARN} --message '${message}' --region ${env.AWS_REGION}"
                        throw e
                    }
                }
            }
        }

        stage('Build with Maven') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                sh 'mvn clean package' // Build the application
            }
        }

        stage('Build Docker Image') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    sh "docker build -f dockerfile_tomcat -t ${env.DOCKER_IMAGE} ."
                }
            }
        }

        stage('Push Docker Image') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'dockerhub-password', variable: 'DOCKERHUB_PASSWORD')]) {
                        sh "echo $DOCKERHUB_PASSWORD | docker login -u sohaliya --password-stdin" // Replace with your Docker Hub username
                        sh "docker push ${env.DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Deploy Docker Container') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    sh "docker run -d -p 8081:8080 --name tomcat_deploy ${env.DOCKER_IMAGE}" 
                }
            }
        }
    }

    post {
        success {
            script {
                def buildNumber = env.BUILD_NUMBER
                def jobName = env.JOB_NAME
                def message = "Build #${buildNumber} for ${jobName} succeeded."
                sh "aws sns publish --topic-arn ${env.SNS_TOPIC_ARN} --message '${message}' --region ${env.AWS_REGION}"
            }
        }
        failure {
            script {
                def buildNumber = env.BUILD_NUMBER
                def jobName = env.JOB_NAME
                def message = "Build #${buildNumber} for ${jobName} failed. Please check the logs for details."
                sh "aws sns publish --topic-arn ${env.SNS_TOPIC_ARN} --message '${message}' --region ${env.AWS_REGION}"
            }
        }
    }
}
